// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_AAM_AAM_IO_H_
#define FLATBUFFERS_GENERATED_AAM_AAM_IO_H_

#include "flatbuffers/flatbuffers.h"


namespace aam {
namespace io {

struct MatrixX;
struct MatrixXi;
struct ActiveAppearanceModel;

struct MatrixX FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t rows() const { return GetField<int32_t>(4, 0); }
  int32_t cols() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<double> *data() const { return GetPointer<const flatbuffers::Vector<double> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* rows */) &&
           VerifyField<int32_t>(verifier, 6 /* cols */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct MatrixXBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) { fbb_.AddElement<int32_t>(4, rows, 0); }
  void add_cols(int32_t cols) { fbb_.AddElement<int32_t>(6, cols, 0); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<double>> data) { fbb_.AddOffset(8, data); }
  MatrixXBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MatrixXBuilder &operator=(const MatrixXBuilder &);
  flatbuffers::Offset<MatrixX> Finish() {
    auto o = flatbuffers::Offset<MatrixX>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MatrixX> CreateMatrixX(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t rows = 0,
   int32_t cols = 0,
   flatbuffers::Offset<flatbuffers::Vector<double>> data = 0) {
  MatrixXBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  return builder_.Finish();
}

struct MatrixXi FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t rows() const { return GetField<int32_t>(4, 0); }
  int32_t cols() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<int32_t> *data() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* rows */) &&
           VerifyField<int32_t>(verifier, 6 /* cols */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct MatrixXiBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rows(int32_t rows) { fbb_.AddElement<int32_t>(4, rows, 0); }
  void add_cols(int32_t cols) { fbb_.AddElement<int32_t>(6, cols, 0); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int32_t>> data) { fbb_.AddOffset(8, data); }
  MatrixXiBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MatrixXiBuilder &operator=(const MatrixXiBuilder &);
  flatbuffers::Offset<MatrixXi> Finish() {
    auto o = flatbuffers::Offset<MatrixXi>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MatrixXi> CreateMatrixXi(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t rows = 0,
   int32_t cols = 0,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> data = 0) {
  MatrixXiBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_cols(cols);
  builder_.add_rows(rows);
  return builder_.Finish();
}

struct ActiveAppearanceModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const MatrixX *shapeMean() const { return GetPointer<const MatrixX *>(4); }
  const MatrixX *shapeModes() const { return GetPointer<const MatrixX *>(6); }
  const MatrixX *shapeModeWeights() const { return GetPointer<const MatrixX *>(8); }
  const MatrixX *shapeTransformToTrainingData() const { return GetPointer<const MatrixX *>(10); }
  const MatrixXi *triangleIndices() const { return GetPointer<const MatrixXi *>(12); }
  const MatrixX *barycentricSamplePositions() const { return GetPointer<const MatrixX *>(14); }
  const MatrixX *appearanceMean() const { return GetPointer<const MatrixX *>(16); }
  const MatrixX *appearanceModes() const { return GetPointer<const MatrixX *>(18); }
  const MatrixX *appearanceModeWeights() const { return GetPointer<const MatrixX *>(20); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* shapeMean */) &&
           verifier.VerifyTable(shapeMean()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* shapeModes */) &&
           verifier.VerifyTable(shapeModes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* shapeModeWeights */) &&
           verifier.VerifyTable(shapeModeWeights()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* shapeTransformToTrainingData */) &&
           verifier.VerifyTable(shapeTransformToTrainingData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* triangleIndices */) &&
           verifier.VerifyTable(triangleIndices()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* barycentricSamplePositions */) &&
           verifier.VerifyTable(barycentricSamplePositions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* appearanceMean */) &&
           verifier.VerifyTable(appearanceMean()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* appearanceModes */) &&
           verifier.VerifyTable(appearanceModes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* appearanceModeWeights */) &&
           verifier.VerifyTable(appearanceModeWeights()) &&
           verifier.EndTable();
  }
};

struct ActiveAppearanceModelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_shapeMean(flatbuffers::Offset<MatrixX> shapeMean) { fbb_.AddOffset(4, shapeMean); }
  void add_shapeModes(flatbuffers::Offset<MatrixX> shapeModes) { fbb_.AddOffset(6, shapeModes); }
  void add_shapeModeWeights(flatbuffers::Offset<MatrixX> shapeModeWeights) { fbb_.AddOffset(8, shapeModeWeights); }
  void add_shapeTransformToTrainingData(flatbuffers::Offset<MatrixX> shapeTransformToTrainingData) { fbb_.AddOffset(10, shapeTransformToTrainingData); }
  void add_triangleIndices(flatbuffers::Offset<MatrixXi> triangleIndices) { fbb_.AddOffset(12, triangleIndices); }
  void add_barycentricSamplePositions(flatbuffers::Offset<MatrixX> barycentricSamplePositions) { fbb_.AddOffset(14, barycentricSamplePositions); }
  void add_appearanceMean(flatbuffers::Offset<MatrixX> appearanceMean) { fbb_.AddOffset(16, appearanceMean); }
  void add_appearanceModes(flatbuffers::Offset<MatrixX> appearanceModes) { fbb_.AddOffset(18, appearanceModes); }
  void add_appearanceModeWeights(flatbuffers::Offset<MatrixX> appearanceModeWeights) { fbb_.AddOffset(20, appearanceModeWeights); }
  ActiveAppearanceModelBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ActiveAppearanceModelBuilder &operator=(const ActiveAppearanceModelBuilder &);
  flatbuffers::Offset<ActiveAppearanceModel> Finish() {
    auto o = flatbuffers::Offset<ActiveAppearanceModel>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<ActiveAppearanceModel> CreateActiveAppearanceModel(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<MatrixX> shapeMean = 0,
   flatbuffers::Offset<MatrixX> shapeModes = 0,
   flatbuffers::Offset<MatrixX> shapeModeWeights = 0,
   flatbuffers::Offset<MatrixX> shapeTransformToTrainingData = 0,
   flatbuffers::Offset<MatrixXi> triangleIndices = 0,
   flatbuffers::Offset<MatrixX> barycentricSamplePositions = 0,
   flatbuffers::Offset<MatrixX> appearanceMean = 0,
   flatbuffers::Offset<MatrixX> appearanceModes = 0,
   flatbuffers::Offset<MatrixX> appearanceModeWeights = 0) {
  ActiveAppearanceModelBuilder builder_(_fbb);
  builder_.add_appearanceModeWeights(appearanceModeWeights);
  builder_.add_appearanceModes(appearanceModes);
  builder_.add_appearanceMean(appearanceMean);
  builder_.add_barycentricSamplePositions(barycentricSamplePositions);
  builder_.add_triangleIndices(triangleIndices);
  builder_.add_shapeTransformToTrainingData(shapeTransformToTrainingData);
  builder_.add_shapeModeWeights(shapeModeWeights);
  builder_.add_shapeModes(shapeModes);
  builder_.add_shapeMean(shapeMean);
  return builder_.Finish();
}

inline const aam::io::ActiveAppearanceModel *GetActiveAppearanceModel(const void *buf) { return flatbuffers::GetRoot<aam::io::ActiveAppearanceModel>(buf); }

inline bool VerifyActiveAppearanceModelBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<aam::io::ActiveAppearanceModel>(); }

inline void FinishActiveAppearanceModelBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<aam::io::ActiveAppearanceModel> root) { fbb.Finish(root); }

}  // namespace io
}  // namespace aam

#endif  // FLATBUFFERS_GENERATED_AAM_AAM_IO_H_
